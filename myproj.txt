git path :
https://github.com/tomernos/python-projects

in my local computer:

=== my-project/my_flask.py ===

#from flask import Flask, render_template, request, redirect, url_for, session, flash
#from SQL import create_table, insert_user, review_users, delete_user, modify_user, count_users, find_user_by_id, verify_user, insert_chat_message, get_all_chat_messages
from flask import *
from SQL import *
import os

app = Flask(__name__)
app.secret_key = os.urandom(24)

# Initialize the database
create_table()
create_chat_table()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        if verify_user(username, password):
            session['username'] = username
            return redirect(url_for('index'))
        else:
            flash('Invalid username or password')
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('index'))




@app.route('/insert', methods=['GET', 'POST'])
def insert():
    if request.method == 'POST':
        id = request.form['id']
        username = request.form['username']
        password = request.form['password']
        classification = request.form['classification']
        age = request.form['age']
        email = request.form['email']
        insert_user(id, username, password, classification, age, email)
        return redirect(url_for('index'))
    return render_template('insert.html')

@app.route('/review')
def review():
    users = review_users()
    total_users = count_users()
    return render_template('review.html', users=users, total_users=total_users)

@app.route('/delete', methods=['GET', 'POST'])
def delete():
    if request.method == 'POST':
        user_id = request.form['user_id']
        delete_user(user_id)
        return redirect(url_for('index'))
    return render_template('delete.html')

@app.route('/modify', methods=['GET', 'POST'])
def modify():
    if request.method == 'POST':
        user_id = request.form['user_id']
        username = request.form['username'] or None
        password = request.form['password'] or None
        classification = request.form['classification'] or None
        age = request.form['age'] or None
        email = request.form['email'] or None
        modify_user(user_id, username, password, classification, age, email)
        return redirect(url_for('index'))
    return render_template('modify.html')

@app.route('/count')
def count():
    total_users = count_users()
    return render_template('count.html', total_users=total_users)

@app.route('/find', methods=['GET', 'POST'])
def find():
    if request.method == 'POST':
        user_id = request.form['user_id']
        user = find_user_by_id(user_id)
        return render_template('find.html', user=user)
    return render_template('find.html')

@app.route('/chat', methods=['GET', 'POST'])
def chat():
    if 'username' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST':
        message = request.form['message']
        insert_chat_message(session['username'], message)
        return redirect(url_for('chat'))

    messages = get_all_chat_messages()
    return render_template('chat.html', messages=messages)


if __name__ == '__main__':
    print(os.getcwd())
    print(app.template_folder)
    app.run(debug=True)


=== my-project/requirements.txt ===

blinker==1.8.2
click==8.1.7
Flask==3.0.3
itsdangerous==2.2.0
Jinja2==3.1.4
MarkupSafe==2.1.5
Werkzeug==3.0.3


=== my-project/SQL.py ===

import sqlite3 as sql3
import hashlib
import os

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
db_path = os.path.join(BASE_DIR, 'example.db')

def create_table():
    conn = sql3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        key INTEGER PRIMARY KEY,
        id INT,
        username VARCHAR(55),
        password TEXT,
        classification CHAR(1),
        age INT,
        email VARCHAR(55)
    )
    ''')
    
    conn.commit()
    conn.close()

def create_chat_table():
    conn = sql3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS chat_messages (
        key INTEGER PRIMARY KEY,
        username TEXT,
        message TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    conn.commit()
    conn.close()

def verify_user(username, password):
    conn = sql3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('SELECT password FROM users WHERE username = ?', (username,))
    row = cursor.fetchone()
    
    conn.close()
    
    if row:
        stored_password = row[0]
        encrypted_password = hashlib.sha256(password.encode()).hexdigest()
        if stored_password == encrypted_password:
            return True
    return False

def insert_user(id, username, password, classification, age, email):
    conn = sql3.connect(db_path)
    cursor = conn.cursor()
    
    # Encrypt the password
    encrypted_password = hashlib.sha256(password.encode()).hexdigest()
    
    cursor.execute('''
    INSERT INTO users (id, username, password, classification, age, email) VALUES (?, ?, ?, ?, ?, ?)
    ''', (id, username, encrypted_password, classification, age, email))
    
    conn.commit()
    conn.close()

def review_users():
    conn = sql3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users')
    rows = cursor.fetchall()
    
    conn.close()
    return rows

def delete_user(user_id):
    conn = sql3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('DELETE FROM users WHERE id = ?', (user_id,))
    
    conn.commit()
    conn.close()

def modify_user(user_id, username=None, password=None, classification=None, age=None, email=None):
    conn = sql3.connect(db_path)
    cursor = conn.cursor()
    
    if username:
        cursor.execute('UPDATE users SET username = ? WHERE id = ?', (username, user_id))
    if password:
        encrypted_password = hashlib.sha256(password.encode()).hexdigest()
        cursor.execute('UPDATE users SET password = ? WHERE id = ?', (encrypted_password, user_id))
    if classification:
        cursor.execute('UPDATE users SET classification = ? WHERE id = ?', (classification, user_id))
    if age:
        cursor.execute('UPDATE users SET age = ? WHERE id = ?', (age, user_id))
    if email:
        cursor.execute('UPDATE users SET email = ? WHERE id = ?', (email, user_id))
    
    conn.commit()
    conn.close()

def count_users():
    conn = sql3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM users')
    count = cursor.fetchone()[0]
    
    conn.close()
    return count

def find_user_by_id(user_id):
    conn = sql3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    
    conn.close()
    return user
##########################################
#          CHAT FUNCTIONS                #
##########################################

def insert_chat_message(username, message):
    conn = sql3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO chat_messages (username, message) VALUES (?, ?)
    ''', (username, message))
    
    conn.commit()
    conn.close()

def get_all_chat_messages():
    conn = sql3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('SELECT username, message, timestamp FROM chat_messages ORDER BY timestamp ASC')
    messages = cursor.fetchall()
    
    conn.close()
    return messages


=== my-project/example.db ===

=== my-project/templates/chat.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
</head>
<body>
    <h1>Chat Box</h1>
    <form action="/chat" method="POST">
        <textarea name="message" rows="4" cols="50" required></textarea><br>
        <button type="submit">Send</button>
    </form>
    <h2>Messages:</h2>
    <div>
        {% for message in messages %}
            <p><strong>{{ message[0] }}:</strong> {{ message[1] }} <em>({{ message[2] }})</em></p>
        {% endfor %}
    </div>
    <a href="{{ url_for('logout') }}">Logout</a>
</body>
</html>


=== my-project/templates/count.html ===

<!DOCTYPE html>
<html>
<head>
    <title>Count Users</title>
</head>
<body>
    <h1>Total Users: {{ total_users }}</h1>
    <a href="/">Back to Menu</a>
</body>
</html>

=== my-project/templates/delete.html ===

<!DOCTYPE html>
<html>
<head>
    <title>Delete User</title>
</head>
<body>
    <h1>Delete User</h1>
    <form method="POST" action="/delete">
        <input type="text" name="user_id" placeholder="User ID" required><br>
        <button type="submit">Delete</button>
    </form>
    <a href="/">Back to Menu</a>
</body>
</html>

=== my-project/templates/find.html ===

<!doctype html>
<html>
<head>
    <title>Find User</title>
</head>
<body>
    <h1>Find User by ID</h1>
    <form method="post" action="/find">
        <label for="user_id">User ID:</label><br>
        <input type="text" id="user_id" name="user_id"><br><br>
        <input type="submit" value="Find">
    </form>
    
    {% if user %}
        <h2>User Details</h2>
        <ul>
            <li>ID: {{ user[1] }}</li>
            <li>Username: {{ user[2] }}</li>
            <li>Password: {{ user[3] }}</li>
            <li>Classification: {{ user[4] }}</li>
            <li>Age: {{ user[5] }}</li>
            <li>Email: {{ user[6] }}</li>
        </ul>
    {% endif %}
    <a href="/">Back to Menu</a>
</body>
</html>

=== my-project/templates/index.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
</head>
<body>
    <h1>Welcome to the Flask App</h1>
    {% if 'username' in session %}
        <p>Hello, {{ session['username'] }} !</p>
        <nav>
            <ul>
                <li><a href="{{ url_for('index') }}">Home</a></li>
                <li><a href="{{ url_for('review') }}">Review Users</a></li>
                <li><a href="{{ url_for('modify') }}">Modify User</a></li>
                <li><a href="{{ url_for('delete') }}">Delete User</a></li>
                <li><a href="{{ url_for('count') }}">Count Users</a></li>
                <li><a href="{{ url_for('find') }}">Find User by ID</a></li>
                <li><a href="{{ url_for('chat') }}">Chat</a></li>
            </ul>
        </nav>
        <a href="{{ url_for('logout') }}">Logout</a>
    {% else %}
        <p>Hello, Guest!</p>
            <li><a href="{{ url_for('login') }}">Login</a></li>
            <li><a href="{{ url_for('insert') }}">Sign Up</a></li>
    {% endif %}
</body>
</html>

=== my-project/templates/insert.html ===

<!-- templates/insert.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Insert User</title>
</head>
<body>
    <h1>Insert User</h1>
    <form method="POST" action="/insert">
        <input type="text" name="id" placeholder="ID" required><br>
        <input type="text" name="username" placeholder="Username" required><br>
        <input type="password" name="password" placeholder="Password" required><br>
        <input type="text" name="classification" placeholder="Classification" required><br>
        <input type="number" name="age" placeholder="Age" required><br>
        <input type="email" name="email" placeholder="Email" required><br>
        <button type="submit">Insert</button>
    </form>
    <a href="/">Back to Menu</a>
</body>
</html>

=== my-project/templates/login.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>
<body>
    <h1>Login</h1>
    <form action="/login" method="POST">
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" required><br>
        <label for="password">Password:</label><br>
        <input type="password" id="password" name="password" required><br><br>
        <button type="submit">Login</button>
    </form>
    {% with messages = get_flashed_messages() %}
        {% if messages %}
            <ul>
                {% for message in messages %}
                    <li>{{ message }}</li>
                {% endfor %}
            </ul>
        {% endif %}
    {% endwith %}
</body>
</html>

=== my-project/templates/modify.html ===

<!DOCTYPE html>
<html>
<head>
    <title>Modify User</title>
</head>
<body>
    <h1>Modify User</h1>
    <form method="POST" action="/modify">
        <input type="text" name="user_id" placeholder="User ID" required><br>
        <input type="text" name="username" placeholder="New Username"><br>
        <input type="password" name="password" placeholder="New Password"><br>
        <input type="text" name="classification" placeholder="New Classification"><br>
        <input type="number" name="age" placeholder="New Age"><br>
        <input type="email" name="email" placeholder="New Email"><br>
        <button type="submit">Modify</button>
    </form>
    <a href="/">Back to Menu</a>
</body>
</html>

=== my-project/templates/review.html ===


<!DOCTYPE html>
<html>
<head>
    <title>Review Users</title>
</head>
<body>
    <h1>Total Users: {{ total_users }}</h1>
    <h1>Review Users : </h1>
    <ul>
    {% for user in users %}
        <li>ID: {{ user[1] }}, Username: {{ user[2] }}, Age: {{ user[5] }}, Email: {{ user[6] }}</li>
    {% endfor %}
    </ul>
    <a href="/">Back to Menu</a>
</body>
</html>


=== my-project/Jenkinsfile ===


pipeline {
    agent any

    environment {
        GIT_CREDENTIALS = '12341234' 
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git branch: 'main', credentialsId: env.GIT_CREDENTIALS, url: 'https://github.com/tomernos/python-projects.git'
                }
            }
        }

        stage('Setup') {
            steps {
                script {
                    sh '''
                    if ! sudo command -v docker &> /dev/null
                    then
                        sudo curl -fsSL https://get.docker.com/ | sh
                    fi
                    '''
      
        
                    sh '''
                    if ! sudo command -v docker-compose &> /dev/null
                    then
                        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                        sudo chmod +x /usr/local/bin/docker-compose
                    fi
                    ''' 
            
                    sh '''
                    if ! sudo command -v python3 &> /dev/null
                    then
                        sudo apt-get update
                        sudo apt-get install -y python3 python3-pip
                    fi
                    '''
                    sh '''
                    if ! sudo command -v git &> /dev/null
                    then
                        sudo apt-get update
                        sudo apt-get install -y git
                    fi
                    '''

                }
            }
        }

        stage('Build') {
            steps {
                script {
                    sh 'sudo docker-compose build'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh '''
                    python3 -m venv venv
                    source venv/bin/activate
                    pip install -r requirements.txt
                    python3 test_myflask.py
                    deactivate
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh 'sudo docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            sh 'sudo docker-compose down'
        }
    }
}


=== my-project/Dockerfile ===

# Use the latest Python image as the base
FROM python:3.9.19-bullseye

# Set the working directory inside the container
WORKDIR /python-docker

# Copy the requirements.txt file into the container
COPY requirements.txt requirements.txt

# Install the Python dependencies specified in requirements.txt
RUN apt-get update && apt-get install -y python3

# Install the Python dependencies specified in requirements.txt
RUN pip3 install -r requirements.txt

# Copy the rest of the application code into the container
COPY . .

EXPOSE 5000

# Define the command to run the Flask application
CMD ["python3", "-m", "my_flask.py", "--host=0.0.0.0"]



=== my-project/docker-compose.yml ===

version: '3.8'

services:
  flask-app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
    volumes:
      - .:/app
    command: >
      sh -c "python3 -m my_flask --host=0.0.0.0"

  db:
    image: sqlite3
    volumes:
      - ./example.db:/app/example.db

  test:
    build: .
    depends_on:
      - flask-app
    command: >
      sh -c "pytest test_myflask.py"


=== my-project/test_myflask.py ===


from flask import Flask, render_template
import os

app = Flask(__name__)

clock_app_url = os.getenv('CLOCK_APP_URL', "http://clock_upp")

@app.route('/')
def home():
    return render_template('update_index.html')

@app.route('/update', methods=['POST'])
def update_clock_app():
    updated_time = request.form.get('updated_time')
    os.system(f'curl -X POST {clock_app_url}/update_time -H "Content-Type: application/json" -d \'{{"time": "{updated_time}" }}\'')
    return 'Time updated successfully!', 200


if __name__ == '__main__':
    app.run(debug=True, port=80, host="0.0.0.0")
